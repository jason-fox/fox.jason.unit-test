<?xml version="1.0" encoding="UTF-8"?><!--
	This file is part of the DITA-OT Unit Test Plug-in project.
	See the accompanying LICENSE file for applicable licenses.
--><project xmlns:if="ant:if" xmlns:unless="ant:unless" name="fox.jason.unit-test">
	<target name="unit-test.log.init">
		<condition property="otversion.legacy">
			<matches pattern="^[1|2].*" string="${otversion}"/>
		</condition>
		<typedef file="${dita.plugin.fox.jason.unit-test.dir}/resource/macros.xml"/>
	</target>
	<target name="unit-test.init">
		<dita-ot-fail id="DOTA069F">
			<condition>
				<not>
					<available file="${args.input}" type="dir"/>
				</not>
			</condition>
			<param name="1" value="${args.input}"/>
		</dita-ot-fail>
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${dita.plugin.fox.jason.unit-test.dir}/lib/ant-contrib-1.0b3.jar"/>
			</classpath>
		</taskdef>
		<taskdef classname="com.oopsconsultancy.xmltask.ant.XmlTask" name="xmltask">
			<classpath>
				<pathelement location="${dita.plugin.fox.jason.unit-test.dir}/lib/xmltask.jar"/>
			</classpath>
		</taskdef>
		<condition property="test.colorize" value="true">
			<os family="unix"/>
		</condition>
		<property name="test.root.dir" value="${dita.temp.dir}/unit-test/fixtures"/>
		<basename file="${args.input}" property="args.input.dirname"/>
		<condition property="testsuite.found">
			<available file="${args.input}/test" type="dir"/>
		</condition>
		
		<!-- If args.input is a test suite, copy over the test suite to temp -->
		<mkdir dir="${test.root.dir}/${args.input.dirname}/test" if:set="testsuite.found"/>
		<copy if:set="testsuite.found" todir="${test.root.dir}/${args.input.dirname}/test">
			<fileset dir="${args.input}/test"/>
		</copy>
		<!-- 
			If args.input was a directory, copy over a every test suite found underneath
		 	it to temp.
		  -->
		<mkdir dir="${test.root.dir}" unless:set="testsuite.found"/>
		<for param="test-suite.dir" trim="true" unless:set="testsuite.found">
			<path>
				<dirset dir="${args.input}">
					<include name="*"/>
				</dirset>
			</path>
			<sequential>
				<local name="testsuite.found"/>
				<condition property="testsuite.found">
					<available file="@{test-suite.dir}/test" type="dir"/>
				</condition>
				<condition property="test.coverage.report" value="true">
					<available file="@{test-suite.dir}/test/template-coverage.xml" type="file"/>
				</condition>
				<propertyregex casesensitive="false" input="@{test-suite.dir}" override="true" property="test-suite" regexp="([^/]*)$" select="\1"/>
				<mkdir dir="${test.root.dir}/${test-suite}/test" if:set="testsuite.found"/>
				<copy if:set="testsuite.found" todir="${test.root.dir}/${test-suite}/test">
					<fileset dir="@{test-suite.dir}/test"/>
				</copy>
			</sequential>
		</for>

		<condition property="test.coverage.report" value="true" else="false">
			<available file="${args.input}/test/template-coverage.xml" type="file"/>
		</condition>
	</target>
	<!--
		Target to create a unit-test fixture for each suite.
	-->
	<target depends="unit-test.log.init" name="generate-fixtures">
		<!-- Now iterate across each test suite and generate the fixtures -->
		<for param="test-suite.dir" trim="true">
			<path>
				<dirset dir="${test.root.dir}">
					<include name="*"/>
				</dirset>
			</path>
			<sequential>
				<propertyregex casesensitive="false" input="@{test-suite.dir}" override="true" property="test-suite" regexp="([^/]*)$" select="\1"/>
				<local name="test-suite.disabled"/>
				<available file="@{test-suite.dir}/test/disabled.txt" property="test-suite.disabled"/>
				<unit-test-log id="UNIT004W" if:set="test-suite.disabled" level="warning" message="The test suite '${test-suite}' is disabled"/>
				<unit-test-log id="UNIT002I" level="warning" message="Generating fixtures for '${test-suite}'" unless:set="test-suite.disabled"/>
				<create-fixture dir="@{test-suite.dir}" suite="${test-suite}" unless:set="test-suite.disabled"/>
			</sequential>
		</for>
	</target>
	<!--
		Iterate across each test suite in turn and run the unit tests using ant-unit.
	-->
	<target name="unit-test">
		<property name="test.copy.dir" value="${args.input}"/>
		<property name="test.copy" value="false"/>
		<condition property="test.suite.run.message" value="Updating test expectations" else="Running tests">
			<istrue value="${test.copy}"/>
		</condition>
		<propertyset id="test-properties">
			<propertyref name="test.copy.dir"/>
			<propertyref name="test.copy"/>
			<propertyref name="test.propertyfile"/>
			<propertyref name="test.coverage.report"/>
			<propertyref name="dita.dir"/>
		</propertyset>
		<taskdef resource="org/apache/ant/antunit/antlib.xml">
			<classpath>
				<pathelement location="${dita.plugin.fox.jason.unit-test.dir}/lib/ant-antunit-1.4.jar"/>
			</classpath>
		</taskdef>
		<mkdir dir="${dita.temp.dir}/unit-test/report"/>
		<for keepgoing="true" param="test-suite.dir">
			<path>
				<dirset dir="${test.root.dir}">
					<present targetdir="${test.root.dir}">
						<mapper from="*" to="*/fixture.xml" type="glob"/>
					</present>
				</dirset>
			</path>
			<sequential>
				<xmltask source="@{test-suite.dir}/fixture.xml">
					<call path="//project/description">
						<param default="" name="description" path="text()"/>
						<actions>
							<unit-test-log id="UNIT002I" level="info" message="${test.suite.run.message} for '@{description}'"/>
							<antunit errorproperty="test-failure" failOnError="false">
								<file file="@{test-suite.dir}/fixture.xml"/>
								<xmllistener logLevel="warning" toDir="${dita.temp.dir}/unit-test/report"/>
								<plainlistener/>
								<propertyset refid="test-properties"/>
							</antunit>
						</actions>
					</call>
				</xmltask>
			</sequential>
		</for>
	</target>
	<!--
		Creates a formatted HTML report using the optional JUnitReport task.
	-->
	<target name="unit-test.report">
		<junitreport todir="${dita.temp.dir}" unless:true="test.copy">
			<fileset dir="${dita.temp.dir}/unit-test/report" includes="*.xml"/>
			<report format="noframes" styledir="${dita.plugin.fox.jason.unit-test.dir}/xsl" todir="${output.dir}"/>
		</junitreport>
		<move file="${output.dir}/junit-noframes.html" tofile="${output.dir}/test-results.html"/>
		<unit-test-failure if:set="test-failure" unless:true="test.copy"/>
		<unit-test-success-echo/>
	</target>
	<!--
		Ant target executed to run a unit test suite.
	-->
	<target depends="build-init,unit-test.init,generate-fixtures,unit-test,coverage.report,unit-test.report" name="dita2unit-test"/>
</project>