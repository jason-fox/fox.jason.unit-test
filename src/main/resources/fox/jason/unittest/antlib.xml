<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--ant-->
<!--
	This file is part of the DITA-OT Pretty DITA Plug-in project.
	See the accompanying LICENSE file for applicable licenses.
-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">


	<!--
		Console log the successful test result and colorize if necessary. 
	-->
	<taskdef
    classname="fox.jason.unittest.tasks.SuccessEchoTask"
    name="unit-test-success-echo"
    onerror="ignore"
  />


	<!--
		Macro to throw an error message if the given files do not match

		@param expectation - Path to the file which holds the expected behaviour
		@param os		- Only make the comparison if the current operating system 
						 is of a given type 
		@param result - Path to the file which holds the actual behaviour from the test run.
		@suffix - File suffix for the result
	-->
	<macrodef name="compare-output">
		<attribute default=".fo" name="suffix"/>
		<attribute default="${basedir}/expected@{suffix}" name="expectation"/>
		<attribute default="${output.dir}/fragment@{suffix}" name="result"/>
		<attribute default="any" name="os"/>
		<sequential>
			<local name="line"/>
			<local name="test.os.matches"/>
			<condition else="false" property="test.os.matches" value="true">
				<or>
					<equals arg1="@{os}" arg2="any"/>
					<os family="@{os}"/>
				</or>
			</condition>
			<property
        name="line"
        value="${line.separator}===================================================${line.separator}"
      />
			<fixcrlf eof="remove" eol="unix" file="@{result}"/>
			<replace
        file="@{result}"
        token="UTF-8standalone=&quot;null&quot;"
        value="encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;"
      />
			<copy-result dest="@{expectation}" src="@{result}"/>
			<loadfile failonerror="true" property="actual" srcfile="@{result}"/>
			<loadfile failonerror="true" property="expected" srcfile="@{expectation}"/>

			<basename property="actual.file" file="@{result}"/>
			<basename property="expected.file" file="@{expectation}"/>


			<exec
        executable="diff"
        osfamily="unix"
        outputproperty="test.diff"
        resultproperty="test.diff.result"
      >
				<arg value="-b"/>
				<arg value="-u"/>
				<arg value="--label"/>
				<arg value="${expected.file}"/>
				<arg value="@{expectation}"/>
				<arg value="--label"/>
				<arg value="${actual.file}"/>
				<arg value="@{result}"/>
			</exec>

			<condition
        else="${expected.file} :${line}${expected}${line}${actual.file} :${line}${actual}"
        property="test.body"
        value="${test.diff}"
      >
				<isset property="test.diff.result"/>
			</condition>

			<assert-equal
        arg1="${expected}"
        arg2="${actual}"
        body="${test.body}"
        message="[FAILED] Test Assertion Failed - Result does not match expectation${line.separator}"
      />
			<unit-test-success-echo/>
		</sequential>
	</macrodef>
	<!--
		Macro to throw an error message if the text is not found

		@param actual 	   - The text actually output by the test
		@param os		- Only make the comparison if the current operating system 
						 is of a given type 
		@param expected    - The expected fragment of text
	-->
	<macrodef name="contains-text">
		<attribute default="${dita.ot.output}" name="actual"/>
		<attribute name="expected"/>
		<attribute default="any" name="os"/>
		<sequential>

			

			<local name="test.contains"/>
			<local name="test.os.matches"/>
			<condition else="false" property="test.os.matches" value="true">
				<or>
					<equals arg1="@{os}" arg2="any"/>
					<os family="@{os}"/>
				</or>
			</condition>
			<condition else="false" property="test.contains" value="true">
				<contains string="@{actual}" substring="@{expected}"/>
			</condition>

			<echo unless:true="${test.contains}" message="@{actual}"/>

			<assert-equal
        arg1="${test.contains}"
        arg2="true"
        body="&quot;@{expected}&quot; missing from log output."
        message="[FAILED] Expected text not found."
      />
			<unit-test-success-echo/>
		</sequential>
	</macrodef>
	<!--
		Macro to execute the HTML5 DITA-OT plugin


		@param ditamap - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait	   The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype - The transtype to use when creating the build 
	-->
	<macrodef name="exec-html5">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute default="html5" name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="test.properties" name="propertyfile"/>
		<sequential>
			<init-test/>
			<run-test
        ditamap="@{ditamap}"
        expectedresult="@{expectedresult}"
        maxwait="@{maxwait}"
        output="${output.dir}/html"
        propertyfile="@{propertyfile}"
        transtype="@{transtype}"
      />
			<delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
		</sequential>
	</macrodef>
	<!--
		Macro to execute the PDF DITA-OT plugin

		@param ditamap    - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait	   The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype  - The transtype to when creating the document.
	-->
	<macrodef name="exec-pdf">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute default="pdf2" name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="test.properties" name="propertyfile"/>
		<sequential>
			<init-test/>
			<run-test
        ditamap="@{ditamap}"
        expectedresult="@{expectedresult}"
        maxwait="@{maxwait}"
        propertyfile="@{propertyfile}"
        transtype="@{transtype}"
      />
			<copy file="${dita.temp.dir}/topic.fo" tofile="${output.dir}/topic.fo"/>
			<delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
		</sequential>
	</macrodef>

	<!--
		Macro to execute a random transtype

		@param ditamap    - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait	   The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype  - The transtype to when creating the document.
	-->
	<macrodef name="exec-transtype">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="test.properties" name="propertyfile"/>
		<attribute name="test.output" default="dita.ot.output"/>
		<sequential>
			<init-test/>
			<run-test
        clean="yes"
        ditamap="@{ditamap}"
        expectedresult="@{expectedresult}"
        maxwait="@{maxwait}"
        propertyfile="@{propertyfile}"
        transtype="@{transtype}"
        test.output="@{test.output}"
      />
		</sequential>
	</macrodef>
	<!-- 
		Extract the <article>from the input HTML.
	
		@param dir - the source directory
		@param from - the source file to extract a fragment from
		@param to - the file to write to
	-->
	<macrodef name="get-html-article">
		<attribute default="${output.dir}/html" name="dir"/>
		<attribute name="from"/>
		<attribute default="${output.dir}/fragment.html" name="to"/>
		<sequential>
			<local name="htmlSource"/>
			<local name="fragment"/>
			<loadfile failonerror="true" property="htmlSource" srcfile="@{dir}/@{from}"/>
			<find-fragment/>

			<!-- strip out comments and save comments only to a separate file -->
			<echo file="@{to}" message="${fragment}"/>	
		</sequential>
	</macrodef>

	<!--
		Extract the string between <article> tags.
	-->
	<taskdef
    classname="fox.jason.unittest.tasks.FindFragmentTask"
    name="find-fragment"
    onerror="ignore"
  />


	<!-- 
		Obtain a test resource from any of the following:

		- the test directory (if file is present)
		- the test-suite directory (if file is present)
		- the test-runner resource directory (default)
	
		@param file - the name of the file to find
		@param property - the name of the property to set.
	-->
	<macrodef name="get-test-resource">
		<attribute name="property"/>
		<attribute name="file"/>
		<attribute default="${test.cfg.dir}/@{file}" name="default"/>
		<sequential>
			<available
        file="${basedir}/@{file}"
        property="@{property}"
        value="${basedir}/@{file}"
      />
			<available
        file="${basedir}/../@{file}"
        property="@{property}"
        value="${basedir}/../@{file}"
      />
			<available
        file="${test.root.dir}/@{file}"
        property="@{property}"
        value="${test.root.dir}/@{file}"
      />
			<property name="@{property}" value="@{default}"/>
		</sequential>
	</macrodef>
	<!-- Private macros start below: -->
	<!--
		Custom <scriptdef>to invoke a conditional <fail>.

		@param arg1 - first argument for comparison
		@param arg2 - second argument for comparison
		@param body - detail of the error message
		@param message - short text description of the error
	-->
	<taskdef
    classname="fox.jason.unittest.tasks.AssertEqualsTask"
    name="assert-equal"
    onerror="ignore"
  />
	<!--
		Macro to invoke a conditional <fail>if time taken exceeds a given limit

		@param duration - the actual duration of a task in seconds
		@param maxwait - time limit of the task in seconds
	-->
	<macrodef name="assert-timeout">
		<attribute name="duration"/>
		<attribute name="maxwait"/>
		<sequential>
			<calculate-value
        operand1="@{duration}"
        operand2="@{maxwait}"
        operation="%"
        resultproperty="percentage"
      />

			<check-time-limit
        percentage="${percentage}"
        body="DITA-OT Operation Exceeded Limit - @{duration} seconds - ${percentage}% of limit"
        message="[FAILED] Test Timeout."
      />
			<echo
        level="warning"
        message="Operation took @{duration} seconds - ${percentage}% of limit."
        taskname="dita-ot"
      />
		</sequential>
	</macrodef>

	<!-- Set a flag if the time limit has been exceeded. -->
	<taskdef
    classname="fox.jason.unittest.tasks.CheckTimeLimitTask"
    name="check-time-limit"
    onerror="ignore"
  />
	<!--
		Custom <scriptdef>to apply some mathematical operations
		This removes a dependency on the Ant Contrib <math>task.

		@param operand1 - first operand
		@param operand2 - second operand
		@param operation - Mathematical operation to invoke - either subtract or percentage
		@param resultproperty - the property to set with the result
	-->
	<taskdef
    classname="fox.jason.unittest.tasks.CalculateValueTask"
    name="calculate-value"
    onerror="ignore"
  />

	<!--
		if test.copy.dir is set, make a copy of the expectation file
		This allows us to refresh the test expectations

		@param dest - destination of the expecation
		@param src -  source of the expecation
	-->
	<taskdef
    classname="fox.jason.unittest.tasks.CopyResultTask"
    name="copy-result"
    onerror="ignore"
  />



	<taskdef
    classname="fox.jason.unittest.tasks.InstrumentationScanTask"
    name="instrumentation-scan"
    onerror="ignore"
  />

	<!--
		Script to set a given property to the current time of the local machine.
		This allows us to run performance testing.

		@param property  - The ant property to set
	-->
	<taskdef
    classname="fox.jason.unittest.tasks.UnixTimestampTask"
    name="unix-timestamp"
    onerror="ignore"
  />



</antlib>
