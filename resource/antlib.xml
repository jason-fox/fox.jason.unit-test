<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<antlib>
	<taskdef classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="${dita.dir}/plugins/fox.jason.unit-test/lib/xmltask.jar" name="xmltask"/>
	<!--
		Macro to throw an error message if the given files do not match

		@param expectation - Path to the file which holds the expected behaviour
		@param os          - Only make the comparison if the current operating system 
		                     is of a given type 
		@param result - Path to the file which holds the actual behaviour from the test run.
		@suffix - File suffix for the result
	-->
	<macrodef name="compare-output">
		<attribute default=".fo" name="suffix"/>
		<attribute default="${basedir}/expected@{suffix}" name="expectation"/>
		<attribute default="${output.dir}/fragment@{suffix}" name="result"/>
		<attribute default="any" name="os"/>
		<sequential>
			<local name="line"/>
			<local name="test.os.matches"/>
			<condition else="false" property="test.os.matches" value="true">
				<or>
					<equals arg1="@{os}" arg2="any"/>
					<os family="@{os}"/>
				</or>
			</condition>
			<property name="line" value="${line.separator}===================================================${line.separator}"/>
			<fixcrlf eof="remove" eol="unix" file="@{result}"/>
			<copy-result dest="@{expectation}" src="@{result}"/>
			<loadfile failonerror="true" property="actual" srcfile="@{result}"/>
			<loadfile failonerror="true" property="expected" srcfile="@{expectation}"/>

			<basename property="actual.file" file="@{result}"/>
			<basename property="expected.file" file="@{expectation}"/>


			<exec executable="diff" osfamily="unix" outputproperty="test.diff" resultproperty="test.diff.result">
				<arg value="-b"/>
				<arg value="-u"/>
				<arg value="--suppress-common-lines"/>
				<arg value="--label"/>
				<arg value="${expected.file}"/>
				<arg value="@{expectation}"/>
				<arg value="--label"/>
				<arg value="${actual.file}"/>
				<arg value="@{result}"/>
			</exec>

			<condition else="${expected.file} :${line}${expected}${line}${actual.file} :${line}${actual}" property="test.body" value="${test.diff}">
				<isset property="test.diff.result"/>
			</condition>

			<assert-equal arg1="${expected}" arg2="${actual}" body="${test.body}" message="[FAILED] Test Assertion Failed - Result does not match expectation${line.separator}"/>
			<unit-test-success-echo/>
		</sequential>
	</macrodef>
	<!--
		Macro to throw an error message if the text is not found

		@param actual 	   - The text actually output by the test
		@param os          - Only make the comparison if the current operating system 
		                     is of a given type 
		@param expected    - The expected fragment of text
	-->
	<macrodef name="contains-text">
		<attribute default="${dita.ot.output}" name="actual"/>
		<attribute name="expected"/>
		<attribute default="any" name="os"/>
		<sequential>
			<local name="test.contains"/>
			<local name="test.os.matches"/>
			<condition else="false" property="test.os.matches" value="true">
				<or>
					<equals arg1="@{os}" arg2="any"/>
					<os family="@{os}"/>
				</or>
			</condition>
			<condition else="false" property="test.contains" value="true">
				<contains string="@{actual}" substring="@{expected}"/>
			</condition>
			<assert-equal arg1="${test.contains}" arg2="true" body="&quot;@{expected}&quot; missing from log output." message="[FAILED] Expected text not found."/>
			<unit-test-success-echo/>
		</sequential>
	</macrodef>
	<!--
		Macro to execute the HTML5 DITA-OT plugin


		@param ditamap - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait        The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype - The transtype to use when creating the build 
	-->
	<macrodef name="exec-html5">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute default="html5" name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="test.properties" name="propertyfile"/>
		<sequential>
			<init-test/>
			<run-test ditamap="@{ditamap}" expectedresult="@{expectedresult}" maxwait="@{maxwait}" output="${output.dir}/html" propertyfile="@{propertyfile}" transtype="@{transtype}"/>
			<delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
		</sequential>
	</macrodef>
	<!--
		Macro to execute the PDF DITA-OT plugin

		@param ditamap    - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait        The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype  - The transtype to when creating the document.
	-->
	<macrodef name="exec-pdf">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute default="pdf2" name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="test.properties" name="propertyfile"/>
		<sequential>
			<init-test/>
			<run-test ditamap="@{ditamap}" expectedresult="@{expectedresult}" maxwait="@{maxwait}" propertyfile="@{propertyfile}" transtype="@{transtype}"/>
			<copy file="${dita.temp.dir}/topic.fo" tofile="${output.dir}/topic.fo"/>
			<delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
		</sequential>
	</macrodef>
	<!--
		Macro to execute the HERE Validation DITA-OT plugin

		@param ditamap    - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait        The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype  - The transtype to run when creating the document.
	-->
	<macrodef name="exec-svrl">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="svrl" name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="test.properties" name="propertyfile"/>
		<sequential>
			<basename file="@{ditamap}" property="document" suffix=".ditamap"/>
			<init-test/>
			<run-test ditamap="@{ditamap}" expectedresult="@{expectedresult}" maxwait="@{maxwait}" propertyfile="@{propertyfile}" transtype="@{transtype}"/>
			<!-- Clean up temp and svrl after invocation -->
			<tempfile deleteonexit="true" property="no-comments" suffix=".svrl"/>
			<tempfile deleteonexit="true" property="ordered-document" suffix=".svrl"/>

			<copy file="${output.dir}/${document}.svrl" tofile="${no-comments}"/>
			<xslt classpathref="xslt.class.path" in="${no-comments}" out="${ordered-document}" style="${dita.dir}/plugins/fox.jason.unit-test/xsl/order.xsl"/>
			<xmltask dest="${output.dir}/fragment.svrl" outputter="simple" source="${ordered-document}"/>
			<delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
		</sequential>
	</macrodef>
	<!--
		Macro to execute a random transtype

		@param ditamap    - The .ditamap file specifying which topics and other resources to use to create a document
		@param expectedresult The expected result when invoking the transform 
		@param maxwait        The maximum time to create a document
		@param propertyfile   The name of a file holding additional properties
		@param transtype  - The transtype to when creating the document.
	-->
	<macrodef name="exec-transtype">
		<attribute default="${basedir}/document.ditamap" name="ditamap"/>
		<attribute name="transtype"/>
		<attribute default="0" name="expectedresult"/>
		<attribute default="100" name="maxwait"/>
		<attribute default="test.properties" name="propertyfile"/>
		<attribute name="test.output" default="dita.ot.output"/>
		<sequential>
			<init-test/>
			<run-test clean="yes" ditamap="@{ditamap}" expectedresult="@{expectedresult}" maxwait="@{maxwait}" propertyfile="@{propertyfile}" transtype="@{transtype}" test.output="@{test.output}"/>
		</sequential>
	</macrodef>
	<!-- 
		Extract the <article>from the input HTML.
	
		@param dir - the source directory
		@param from - the source file to extract a fragment from
		@param to - the file to write to
	-->
	<macrodef name="get-html-article">
		<attribute default="${output.dir}/html" name="dir"/>
		<attribute name="from"/>
		<attribute default="${output.dir}/fragment.html" name="to"/>
		<sequential>
			<local name="htmlSource"/>
			<local name="fragment"/>
			<loadfile failonerror="true" property="htmlSource" srcfile="@{dir}/@{from}"/>
			<script language="javascript">//
				<![CDATA[
		    	var input = project.getProperty("htmlSource");
		       	var start =  input.indexOf("<article");
		       	var end = input.indexOf("</article>") + 10;
		      	project.setProperty("fragment", input.substring(start, end) );
			// ]]></script>

			<!-- strip out comments and save comments only to a separate file -->
			<echo file="@{to}" message="${fragment}"/>	
		</sequential>
	</macrodef>
	<!-- 
		Extract the equivalent to a topic file from topic.fo
	
		@param from - the source file to extract a fragment from
		@param to - the file to write to
	-->
	<macrodef name="get-pdf-article">
		<attribute default="${output.dir}/topic.fo" name="from"/>
		<attribute default="${output.dir}/fragment.fo" name="to"/>
		<sequential>
			<!-- 
				For a FOP file, just extract the final topic 
				<fo:flow flow-name="xsl-region-body">element
			-->
			<xslt classpathref="xslt.class.path" in="@{from}" out="@{to}" style="${dita.dir}/plugins/fox.jason.unit-test/xsl/topic-fo.xsl"/>
			<replace file="@{to}" token="${basedir}" value="."/>
			<replace-pdf-font-family file="@{to}"/>
			<replace-pdf-colors file="@{to}"/>
			<replace-pdf-attributes file="@{to}"/>
			<xmltask dest="@{to}" outputter="simple" source="@{to}"/>
		</sequential>
	</macrodef>
	<!-- 
		Obtain a test resource from any of the following:

		- the test directory (if file is present)
		- the test-suite directory (if file is present)
		- the test-runner resource directory (default)
	
		@param file - the name of the file to find
		@param property - the name of the property to set.
	-->
	<macrodef name="get-test-resource">
		<attribute name="property"/>
		<attribute name="file"/>
		<attribute default="${test.cfg.dir}/@{file}" name="default"/>
		<sequential>
			<available file="${basedir}/@{file}" property="@{property}" value="${basedir}/@{file}"/>
			<available file="${basedir}/../@{file}" property="@{property}" value="${basedir}/../@{file}"/>
			<available file="${test.root.dir}/@{file}" property="@{property}" value="${test.root.dir}/@{file}"/>
			<property name="@{property}" value="@{default}"/>
		</sequential>
	</macrodef>
	<!-- Private macros start below: -->
	<!--
		Custom <scriptdef>to invoke a conditional <fail>.

		@param arg1 - first argument for comparison
		@param arg2 - second argument for comparison
		@param body - detail of the error message
		@param message - short text description of the error
	-->
	<scriptdef language="javascript" name="assert-equal">
		<attribute name="arg1"/>
		<attribute name="arg2"/>
		<attribute name="message"/>
		<attribute name="body"/>
		<![CDATA[
			
			var arg1 = attributes.get("arg1");
			var arg2 = attributes.get("arg2");
			var os = "true".equals(project.getProperty("test.os.matches"));
			

			if(os && !arg1.equals(arg2)){

				var message = attributes.get("message");
				var body = attributes.get("body");
				var escape = String.fromCharCode(27);
				var colorize = "true".equals(project.getProperty("test.colorize"));

				if (colorize) {
					message =  escape + "[31m" + message;
					message += escape + "[0m";
				}
				project.log('', 1);
				project.log(message, 1);
			
				var task = project.createTask("fail"); 
				task.setMessage(body);

				task.perform();
			} 
		]]>
	</scriptdef>
	<!--
		Macro to invoke a conditional <fail>if time taken exceeds a given limit

		@param duration - the actual duration of a task in seconds
		@param maxwait - time limit of the task in seconds
	-->
	<macrodef name="assert-timeout">
		<attribute name="duration"/>
		<attribute name="maxwait"/>
		<sequential>
			<calculate-value operand1="@{duration}" operand2="@{maxwait}" operation="%" resultproperty="percentage"/>
			<condition property="limit-exceeded">
				<scriptcondition language="javascript" value="false">
					<![CDATA[
						var percent = parseInt(project.getProperty('percentage'));
						if (percent >100){
							self.setValue(true);
						}
					]]>
				</scriptcondition>
			</condition>
			<property name="limit-exceeded" value="false"/>
			<assert-equal arg1="${limit-exceeded}" arg2="false" body="DITA-OT Operation Exceeded Limit - @{duration} seconds - ${percentage}% of limit" message="[FAILED] Test Timeout."/>
			<echo level="warning" message="Operation took @{duration} seconds - ${percentage}% of limit." taskname="dita-ot"/>
		</sequential>
	</macrodef>
	<!--
		Custom <scriptdef>to apply some mathematical operations
		This removes a dependency on the Ant Contrib <math>task.

		@param operand1 - first operand
		@param operand2 - second operand
		@param operation - Mathematical operation to invoke - either subtract or percentage
		@param resultproperty - the property to set with the result
	-->
	<scriptdef language="javascript" name="calculate-value">
		<attribute name="resultproperty"/>
		<attribute name="operand1"/>
		<attribute name="operation"/>
		<attribute name="operand2"/>
		<![CDATA[
			var property = attributes.get("resultproperty");
			var operand1 = attributes.get("operand1");
			var operation = attributes.get("operation");
			var operand2 = attributes.get("operand2");

			if(operation.equals("-")){
				project.setProperty(property, operand1 - operand2);
			} else if(operation.equals("%")){
				// Percentage, not modulus.
				project.setProperty(property,  Math.round((operand1 * 100)/ operand2));
			}
		]]>
	</scriptdef>
	<!--
		if test.copy.dir is set, make a copy of the expectation file
		This allows us to refresh the test expectations

		@param dest - destination of the expecation
		@param src -  source of the expecation
	-->
	<scriptdef language="javascript" name="copy-result">
		<attribute name="src"/>
		<attribute name="dest"/>
		<![CDATA[
			
			var file = attributes.get("src");
			var toFile = attributes.get("dest");
			var os = "true".equals(project.getProperty("test.os.matches"));

			var rootDir = project.getProperty("test.root.dir");
			var testCopyDir = project.getProperty("test.copy.dir");
			var testCopy = "true".equals(project.getProperty("test.copy"));

			if(testCopy && os){
				var task = project.createTask("copy"); 
				task.setFile(new java.io.File(file)); 
				task.setTofile(new java.io.File(toFile.replace(rootDir, testCopyDir)));
				task.setOverwrite(true);
				task.perform();
			} 
		]]>
	</scriptdef>
	<!--
		Setting up common testing pre-processing. Sets up ANT variable defaults
	-->
	<macrodef name="init-test">
		<sequential>
			<property name="dita.exec" value="${dita.dir}/bin/dita"/>
			<property name="test.copy.dir" value="${test.root.dir}"/>
			<property name="output.dir" value="${basedir}/out"/>
			<property name="dita.temp.dir" value="${basedir}/temp"/>
			<property name="test.cfg.dir" value="${dita.dir}/plugins/fox.jason.unit-test/cfg"/>
			<property name="test.copy" value="false"/>
			<condition property="test.colorize" value="true">
				<os family="unix"/>
			</condition>
			<condition property="dita.ot.verbose" value="-d" else="-v">
				<istrue value="${test.coverage.report}"/>
			</condition>

			<path id="xslt.class.path">
				<fileset dir="${dita.dir}/lib">
					<include name="*.jar"/>
				</fileset>
			</path>
			<delete dir="${output.dir}" failonerror="false" quiet="true"/>
			<delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
			<mkdir dir="${dita.temp.dir}"/>
			<tempfile createfile="true" deleteonexit="true" destdir="${dita.temp.dir}" property="test.propertyfile"/>
		</sequential>
	</macrodef>
	<!-- 
		Remove untested attributes from fragment
	
		@param file - the source file to extract a fragment from
	-->
	<macrodef name="replace-pdf-attributes">
		<attribute name="file"/>
		<sequential>
			<get-test-resource file="attributes.xml" property="test.attributes.src"/>
			<xmltask source="${test.attributes.src}">
				<call path="//attribute">
					<param name="name" path="@name"/>
					<actions>
						<xmltask dest="@{file}" source="@{file}">
							<attr attr="@{name}" path="//*" remove="true"/>
						</xmltask>
					</actions>
				</call>
			</xmltask>
		</sequential>
	</macrodef>
	<!-- 
		Remove hex colors from the test results.
	
		@param file - the source file to extract a fragment from
	-->
	<macrodef name="replace-pdf-colors">
		<attribute name="file"/>
		<sequential>
			<get-test-resource file="colors.xml" property="test.colors.src"/>
			<xmltask source="${test.colors.src}">
				<call path="//color">
					<param name="name" path="@name"/>
					<param name="hex" path="@hex"/>
					<actions>
						<replaceregexp file="@{file}" flags="gi" match="@{hex}" replace="@{name}"/>
					</actions>
				</call>
			</xmltask>
		</sequential>
	</macrodef>
	<!-- 
		Remove details of the expected fonts from the test results.
	
		@param file - the source file to extract a fragment from
	-->
	<macrodef name="replace-pdf-font-family">
		<attribute name="file"/>
		<sequential>
			<get-test-resource file="fonts.xml" property="test.fonts.src"/>
			<xmltask source="${test.fonts.src}">
				<call path="//font">
					<param name="name" path="@name"/>
					<param name="value" path="@value"/>
					<actions>
						<replaceregexp file="@{file}" flags="gi" match="@{value}" replace="@{name}"/>
					</actions>
				</call>
			</xmltask>
		</sequential>
	</macrodef>
	<!--
		Macro to execute a DITA-OT transtype on a DITA document

		@param ditamap        - The .ditamap file specifying which topics and other 
							     resources to use to create a document
		@param transtype      - The transtype to run when creating the document.
		@param expectedresult The expected result when invoking the transform 
		@param maxwait        The maximum time to create a document
		@param output         The location to place the DITA output
		@param propertyfile   The name of a file holding additional properties
	-->
	<macrodef name="run-test">
		<attribute name="ditamap"/>
		<attribute name="transtype"/>
		<attribute name="expectedresult"/>
		<attribute default="${output.dir}" name="output"/>
		<attribute default="test.properties" name="propertyfile"/>
		<attribute name="maxwait"/>
		<attribute default="no" name="clean"/>
		<attribute name="test.output" default="dita.ot.output"/>
		<sequential>
			<local name="test.properties"/>
			<get-test-resource default="${test.propertyfile}" file="@{propertyfile}" property="test.properties"/>
			<echo level="warning" message="Running '@{transtype}' transform ..." taskname="dita-ot"/>
			<unix-timestamp property="start"/>
			<!-- For Unix run the DITA executable-->
			<exec executable="${dita.exec}" osfamily="unix" outputproperty="@{test.output}" resultproperty="dita.ot.result">
				<arg value="-input"/>
				<arg value="@{ditamap}"/>
				<arg value="-output"/>
				<arg value="@{output}"/>
				<arg value="-format"/>
				<arg value="@{transtype}"/>
				<arg value="-temp"/>
				<arg value="${dita.temp.dir}"/>
				<arg value="--clean.temp=@{clean}"/>
				<arg value="--propertyfile"/>
				<arg value="${test.properties}"/>
				<arg value="${dita.ot.verbose}"/>
			</exec>
			<!-- For Windows run from a DOS command -->
			<exec dir="${dita.dir}/bin" executable="cmd" osfamily="windows" outputproperty="@{test.output}" resultproperty="dita.ot.result">
				<arg value="/C"/>
				<arg value="dita -input @{ditamap} -output @{output}-format @{transtype} -temp ${dita.temp.dir} --clean.temp=@{clean} ${dita.ot.verbose}"/>
			</exec>
			<unix-timestamp property="stop"/>

			
			<instrumentation-scan input="@{test.output}"/>


			<echo message="${dita.ot.instrument}" file="${output.dir}/instrument.txt" />
			<assert-equal arg1="${dita.ot.result}" arg2="@{expectedresult}" body="Expected @{expectedresult} got ${dita.ot.result}" message="[FAILED] Unexpected Result ${dita.ot.result} from DITA-OT"/>
			<calculate-value operand1="${stop}" operand2="${start}" operation="-" resultproperty="duration"/>
			<assert-timeout duration="${duration}" maxwait="@{maxwait}"/>
		</sequential>
	</macrodef>

	<scriptdef name="instrumentation-scan" language="javascript">
		<attribute name="input"/>
		<![CDATA[
			var inputProperty = attributes.get("input")
		    var input = project.getProperty(inputProperty);
		    project.log(input, 2);
		    var re = /(([\w|\.\-]*:$)|(\w*:.*\.xsl))/gm;
		    var myArray = input.match(re);
		    project.setProperty("dita.ot.instrument", myArray.join(String.fromCharCode(13)));
		]]>	
	</scriptdef>
	<!--
		Add ansi color tags to output if requested.
	-->
	<scriptdef language="javascript" name="unit-test-success-echo">
		<![CDATA[
			var escape = String.fromCharCode(27);
			var os = "true".equals(project.getProperty("test.os.matches"));
			var colorize = "true".equals(project.getProperty("test.colorize"));
			var testCopy = "true".equals(project.getProperty("test.copy"));

			var input = testCopy ?  "[WARN] Updated test expectation" : "[SUCCESS] Result matched expectation";
			var ansiColor = testCopy ? "[33m" :  "[32m";

			if (colorize) {
				input =  escape + ansiColor + input;
				input += escape + "[0m";
			}
			if (os) {
				project.log('', 1);
				project.log(input, 1);
			}
		]]>
	</scriptdef>
	<!--
		Script to set a given property to the current time of the local machine.
		This allows us to run performance testing.

		@param property  - The ant property to set
	-->
	<scriptdef language="javascript" name="unix-timestamp">
		<attribute name="property"/>
		<![CDATA[
			var property = attributes.get("property");
			var nowSeconds = Math.round(new Date().getTime()/1000);
			project.setProperty(property, nowSeconds);
		]]>
	</scriptdef>
</antlib>