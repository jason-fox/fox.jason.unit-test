<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--ant-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">
	<taskdef
    classname="com.oopsconsultancy.xmltask.ant.XmlTask"
    classpath="${dita.dir}/plugins/fox.jason.unit-test/lib/xmltask.jar"
    name="xmltask"
  />

    <!--
	   Macro to and check how often a coverage token is found

	   @param id		 - The token to check
	   @param dir		- The location of the test-suite
	   @param resultfile   - The result file to update
	   @param includes	- The mask of files to check
    -->
    <macrodef name="coverage-check">
	   <attribute name="id"/>
	   <attribute name="dir"/>
	   <attribute default="${test.coverage.xml}" name="resultfile"/>
	   <attribute name="includes"/>
	   <element name="test-condition" optional="false"/>
	   <sequential>
		  <local name="fileset.count"/>
		  <resourcecount property="fileset.count">
			 <path>
				<fileset dir="@{dir}" includes="@{includes}">
				    <test-condition/>
				</fileset>
			 </path>
		  </resourcecount>
		  <xmltask dest="@{resultfile}" source="@{resultfile}">
			 <attr
          attr="hits"
          path="//package [@name='${test-suite}']//*[@id='@{id}']"
          value="${fileset.count}"
        />
		  </xmltask>
		  <if>
			 <not>
				<equals arg1="${fileset.count}" arg2="0"/>
			 </not>
			 <then>
				<math
            datatype="int"
            operand1="${covered.count}"
            operand2="1"
            operation="+"
            result="covered.count"
          />
			 </then>
		  </if>
	   </sequential>
    </macrodef>
    <!--
	   Macro to iterate across the expectation in a test suite and check how often
	   a coverage token is found

	   @param dir	   - The location of the test-suite
	   @param resultfile   - The result file to update
	   @param includes	- The mask of files to check
    -->
    <macrodef name="coverage-runner">
	   <attribute name="dir"/>
	   <attribute default="${test.coverage.xml}" name="resultfile"/>
	   <attribute name="includes"/>
	   <attribute name="file"/>
	   <sequential>
		  <var name="token.count" value="0"/>
		  <var name="covered.count" value="0"/>
		  <var name="percentage" value="0"/>
		  <xmltask source="@{dir}/test/@{file}">
			 <call path="//element[text()]">
				<param default="" name="token" path="text()"/>
				<param default="" name="id" path="@id"/>
				<actions>
				    <propertyregex
              defaultValue="@{token}"
              global="true"
              input="@{token}"
              override="true"
              property="regex"
              regexp=" "
              replace=".+"
            />
				    <coverage-check
              dir="@{dir}"
              id="@{id}"
              resultfile="@{resultfile}"
              includes="@{includes}"
            >
					   <test-condition>
						  <containsregexp casesensitive="yes" expression="&lt;${regex}.*&gt;"/>
					   </test-condition>
				    </coverage-check>
				    <math
              datatype="int"
              operand1="${token.count}"
              operand2="1"
              operation="+"
              result="token.count"
            />
				</actions>
			 </call>
			 <call path="//line[text()]">
				<param default="" name="token" path="text()"/>
				<param default="" name="id" path="@id"/>
				<actions>
				    <coverage-check
              dir="@{dir}"
              id="@{id}"
              resultfile="@{resultfile}"
              includes="@{includes}"
            >
					   <test-condition>
						  <contains casesensitive="yes" text="@{token}"/>
					   </test-condition>
				    </coverage-check>
				    <math
              datatype="int"
              operand1="${token.count}"
              operand2="1"
              operation="+"
              result="token.count"
            />
				</actions>
			 </call>
		  </xmltask>
		  <math
        datatype="double"
        operand1="${covered.count}"
        operand2="${token.count}"
        operation="/"
        result="percentage"
      />
		  <xmltask dest="@{resultfile}" source="@{resultfile}">
			 <attr
          attr="percent"
          path="//package[@name='${test-suite}']"
          value="${percentage}"
        />
			 <attr
          attr="tokens"
          path="//package[@name='${test-suite}']"
          value="${token.count}"
        />
			 <attr
          attr="covered"
          path="//package[@name='${test-suite}']"
          value="${covered.count}"
        />
		  </xmltask>
	   </sequential>
    </macrodef>
    <!--
	   Macro to create a series of ant targets to validate and build each document.

	   Effectively this forms the setup phase of a test fixture.

	   @param dir	   - The location of the tests
	   @param suite	  - The name of the test suite

    -->
    <macrodef name="create-fixture">
	   <attribute name="dir"/>
	   <attribute name="suite"/>
	   <sequential>
		  <xmltask
        dest="@{dir}/fixture.xml"
        source="${dita.plugin.fox.jason.unit-test.dir}/resource/fixture.xml"
      />
		  <xmltask dest="@{dir}/fixture.xml" source="@{dir}/fixture.xml">
			 <replace
          path="/project/description"
          withXml="&lt;description&gt;@{suite}&lt;/description&gt;"
        />
		  </xmltask>
		  <for param="doc-type-path">
			 <path>
				<dirset dir="@{dir}/test" includes="*">
				    <exclude name="*/out"/>
				    <exclude name="*/temp"/>
				    <present targetdir="@{dir}/test">
					   <mapper from="*" to="*/build.xml" type="glob"/>
				    </present>
				</dirset>
			 </path>
			 <!-- Loop through all directories with a build/build.xml -->
			 <sequential>
				<local name="test.name"/>
				<local name="test.description"/>
				<local name="test.disabled"/>
				<propertyregex
            casesensitive="false"
            input="@{doc-type-path}"
            override="true"
            property="test.name"
            regexp="([^/\\]*)$"
            select="\1"
          />
				<condition property="test.disabled" value="true">
				    <resourcecontains
              resource="@{doc-type-path}/build.xml"
              substring="@disabled"
            />
				</condition>
				<xmltask source="@{doc-type-path}/build.xml">
				    <copy path="//project/description/text()" property="test.description"/>
				</xmltask>
				<xmltask source="@{doc-type-path}/build.xml">
				    <copy path="//project/target/@description" property="test.description"/>
				</xmltask>
				<property name="test.description" value="${test.name}"/>

				<dita-ot-echo id="UNIT005W" if:set="test.disabled">
				    <param name="1" value="The test '@{suite}/${test.name}' is disabled."/>
				</dita-ot-echo>

				<xmltask
            dest="@{dir}/fixture.xml"
            source="@{dir}/fixture.xml"
            unless:set="test.disabled"
          >
				    <insert
              path="/project"
            >&lt;target name=&quot;test: ${test.description}&quot;&gt;
	   &lt;unit-test name=&quot;${test.name}&quot;/&gt;
    &lt;/target&gt;

				    </insert>
				</xmltask>
			 </sequential>
		  </for>
	   </sequential>
    </macrodef>

	   <!--
	   Macro to execute the HERE Validation DITA-OT plugin

	   @param ditamap    - The .ditamap file specifying which topics and other resources to use to create a document
	   @param expectedresult The expected result when invoking the transform 
	   @param maxwait	   The maximum time to create a document
	   @param propertyfile   The name of a file holding additional properties
	   @param transtype  - The transtype to run when creating the document.
    -->
    <macrodef name="exec-svrl">
	   <attribute default="${basedir}/document.ditamap" name="ditamap"/>
	   <attribute default="100" name="maxwait"/>
	   <attribute default="svrl" name="transtype"/>
	   <attribute default="0" name="expectedresult"/>
	   <attribute default="test.properties" name="propertyfile"/>
	   <sequential>
		  <basename file="@{ditamap}" property="document" suffix=".ditamap"/>
		  <init-test/>
		  <run-test
        ditamap="@{ditamap}"
        expectedresult="@{expectedresult}"
        maxwait="@{maxwait}"
        propertyfile="@{propertyfile}"
        transtype="@{transtype}"
      />
		  <!-- Clean up temp and svrl after invocation -->
		  <tempfile deleteonexit="true" property="no-comments" suffix=".svrl"/>
		  <tempfile deleteonexit="true" property="ordered-document" suffix=".svrl"/>

		  <copy file="${output.dir}/${document}.svrl" tofile="${no-comments}"/>
		  <xslt
        classpathref="xslt.class.path"
        in="${no-comments}"
        out="${ordered-document}"
        style="${dita.dir}/plugins/fox.jason.unit-test/xsl/order.xsl"
      />
		  <xmltask
        dest="${output.dir}/fragment.svrl"
        outputter="simple"
        source="${ordered-document}"
      />
		  <delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
	   </sequential>
    </macrodef>

	   <!-- 
	   Extract the equivalent to a topic file from topic.fo
    
	   @param from - the source file to extract a fragment from
	   @param to - the file to write to
    -->
    <macrodef name="get-pdf-article">
	   <attribute default="${output.dir}/topic.fo" name="from"/>
	   <attribute default="${output.dir}/fragment.fo" name="to"/>
	   <sequential>
		  <!-- 
			 For a FOP file, just extract the final topic 
			 <fo:flow flow-name="xsl-region-body">element
		  -->
		  <xslt
        classpathref="xslt.class.path"
        in="@{from}"
        out="@{to}"
        style="${dita.dir}/plugins/fox.jason.unit-test/xsl/topic-fo.xsl"
      />
		  <replace file="@{to}" token="${basedir}" value="."/>
		  <replace-pdf-font-family file="@{to}"/>
		  <replace-pdf-colors file="@{to}"/>
		  <replace-pdf-attributes file="@{to}"/>
		  <xmltask dest="@{to}" outputter="simple" source="@{to}"/>
	   </sequential>
    </macrodef>

	   <!--
	   Setting up common testing pre-processing. Sets up ANT variable defaults
    -->
    <macrodef name="init-test">
	   <sequential>
		  <property name="dita.exec" value="${dita.dir}/bin/dita"/>
		  <property name="test.copy.dir" value="${test.root.dir}"/>
		  <property name="output.dir" value="${basedir}/out"/>
		  <property name="dita.temp.dir" value="${basedir}/temp"/>
		  <property
        name="test.cfg.dir"
        value="${dita.dir}/plugins/fox.jason.unit-test/cfg"
      />
		  <property name="test.copy" value="false"/>
		  <condition property="test.colorize" value="true">
			 <os family="unix"/>
		  </condition>
		  <condition property="dita.ot.verbose" value="-d" else="-v">
			 <istrue value="${test.coverage.report}"/>
		  </condition>

		  <path id="xslt.class.path">
			 <fileset dir="${dita.dir}/lib">
				<include name="*.jar"/>
			 </fileset>
		  </path>
		  <delete dir="${output.dir}" failonerror="false" quiet="true"/>
		  <delete dir="${dita.temp.dir}" failonerror="false" quiet="true"/>
		  <mkdir dir="${dita.temp.dir}"/>
		  <tempfile
        createfile="true"
        deleteonexit="true"
        destdir="${dita.temp.dir}"
        property="test.propertyfile"
      />
	   </sequential>
    </macrodef>
    <!-- 
	   Remove untested attributes from fragment
    
	   @param file - the source file to extract a fragment from
    -->
    <macrodef name="replace-pdf-attributes">
	   <attribute name="file"/>
	   <sequential>
		  <get-test-resource file="attributes.xml" property="test.attributes.src"/>
		  <xmltask source="${test.attributes.src}">
			 <call path="//attribute">
				<param name="name" path="@name"/>
				<actions>
				    <xmltask dest="@{file}" source="@{file}">
					   <attr attr="@{name}" path="//*" remove="true"/>
				    </xmltask>
				</actions>
			 </call>
		  </xmltask>
	   </sequential>
    </macrodef>
    <!-- 
	   Remove hex colors from the test results.
    
	   @param file - the source file to extract a fragment from
    -->
    <macrodef name="replace-pdf-colors">
	   <attribute name="file"/>
	   <sequential>
		  <get-test-resource file="colors.xml" property="test.colors.src"/>
		  <xmltask source="${test.colors.src}">
			 <call path="//color">
				<param name="name" path="@name"/>
				<param name="hex" path="@hex"/>
				<actions>
				    <replaceregexp file="@{file}" flags="gi" match="@{hex}" replace="@{name}"/>
				</actions>
			 </call>
		  </xmltask>
	   </sequential>
    </macrodef>
    <!-- 
	   Remove details of the expected fonts from the test results.
    
	   @param file - the source file to extract a fragment from
    -->
    <macrodef name="replace-pdf-font-family">
	   <attribute name="file"/>
	   <sequential>
		  <get-test-resource file="fonts.xml" property="test.fonts.src"/>
		  <xmltask source="${test.fonts.src}">
			 <call path="//font">
				<param name="name" path="@name"/>
				<param name="value" path="@value"/>
				<actions>
				    <replaceregexp
              file="@{file}"
              flags="gi"
              match="@{value}"
              replace="@{name}"
            />
				</actions>
			 </call>
		  </xmltask>
	   </sequential>
    </macrodef>



    <!--
	   Macro to execute a DITA-OT transtype on a DITA document

	   @param ditamap	   - The .ditamap file specifying which topics and other 
						   resources to use to create a document
	   @param transtype	 - The transtype to run when creating the document.
	   @param expectedresult The expected result when invoking the transform 
	   @param maxwait	   The maximum time to create a document
	   @param output	    The location to place the DITA output
	   @param propertyfile   The name of a file holding additional properties
    -->
    <macrodef name="run-test">
	   <attribute name="ditamap"/>
	   <attribute name="transtype"/>
	   <attribute name="expectedresult"/>
	   <attribute default="${output.dir}" name="output"/>
	   <attribute default="test.properties" name="propertyfile"/>
	   <attribute name="maxwait"/>
	   <attribute default="no" name="clean"/>
	   <attribute name="test.output" default="dita.ot.output"/>
	   <sequential>
		  <local name="test.properties"/>
		  <get-test-resource
        default="${test.propertyfile}"
        file="@{propertyfile}"
        property="test.properties"
      />
		  <echo
        level="warning"
        message="Running '@{transtype}' transform ..."
        taskname="dita-ot"
      />
		  <unix-timestamp property="start"/>
		  <!-- For Unix run the DITA executable-->
		  <exec
        executable="${dita.exec}"
        osfamily="unix"
        outputproperty="@{test.output}"
        resultproperty="dita.ot.result"
      >
			 <arg value="-input"/>
			 <arg value="@{ditamap}"/>
			 <arg value="-output"/>
			 <arg value="@{output}"/>
			 <arg value="-format"/>
			 <arg value="@{transtype}"/>
			 <arg value="-temp"/>
			 <arg value="${dita.temp.dir}"/>
			 <arg value="--clean.temp=@{clean}"/>
			 <arg value="--propertyfile"/>
			 <arg value="${test.properties}"/>
			 <arg value="${dita.ot.verbose}"/>
		  </exec>
		  <!-- For Windows run from a DOS command -->
		  <exec
        dir="${dita.dir}/bin"
        executable="cmd"
        osfamily="windows"
        outputproperty="@{test.output}"
        resultproperty="dita.ot.result"
      >
			 <arg value="/C"/>
			 <arg
          value="dita -input @{ditamap} -output @{output}-format @{transtype} -temp ${dita.temp.dir} --clean.temp=@{clean} ${dita.ot.verbose}"
        />
		  </exec>
		  <unix-timestamp property="stop"/>

		  
		  <instrumentation-scan input="@{test.output}"/>


		  <echo message="${dita.ot.instrument}" file="${output.dir}/instrument.txt"/>
		  <assert-equal
        arg1="${dita.ot.result}"
        arg2="@{expectedresult}"
        body="Expected @{expectedresult} got ${dita.ot.result}"
        message="[FAILED] Unexpected Result ${dita.ot.result} from DITA-OT"
      />
		  <calculate-value
        operand1="${stop}"
        operand2="${start}"
        operation="-"
        resultproperty="duration"
      />
		  <assert-timeout duration="${duration}" maxwait="@{maxwait}"/>
	   </sequential>
    </macrodef>


    <!--
	   Tidy up an output to ensure the indenting is consistent.

	   @param file  - The file to indent
    -->
    <macrodef name="tidy-xml">
	   <attribute name="file"/>
	   <sequential>
		  <xmltask
        expandEntityReferences="false"
        dest="@{file}"
        outputter="simple"
        source="@{file}"
      >
		  </xmltask>
	   </sequential>
    </macrodef>




	<taskdef
    resource="fox/jason/unittest/antlib.xml"
    classpath="${dita.dir}/plugins/fox.jason.unit-test/lib/unittest-1.2.jar"
  />
	
</antlib>
