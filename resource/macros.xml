<?xml version="1.0" encoding="UTF-8" standalone="no"?><!--ant-->
<!--
	This file is part of the DITA-OT Unit Test Plug-in project.
	See the accompanying LICENSE file for applicable licenses.
-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!--
		Macro to and check how often a coverage token is found

		@param id           - The token to check
		@param dir          - The location of the test-suite
		@param resultfile   - The result file to update
		@param includes     - The mask of files to check
	-->
	<macrodef name="coverage-check">
		<attribute name="id"/>
		<attribute name="dir"/>
		<attribute default="${test.coverage.xml}" name="resultfile"/>
		<attribute name="includes"/>
		<element name="test-condition" optional="false"/>
		<sequential>
			<local name="fileset.count"/>
			<resourcecount property="fileset.count">
				<path>
					<fileset dir="@{dir}" includes="@{includes}">
						<test-condition/>
					</fileset>
				</path>
			</resourcecount>
			<xmltask dest="@{resultfile}" source="@{resultfile}">
				<attr attr="hits" path="//package [@name='${test-suite}']//*[@id='@{id}']" value="${fileset.count}"/>
			</xmltask>
			<if>
				<not>
					<equals arg1="${fileset.count}" arg2="0"/>
				</not>
				<then>
					<math datatype="int" operand1="${covered.count}" operand2="1" operation="+" result="covered.count"/>
				</then>
			</if>
		</sequential>
	</macrodef>
	<!--
		Macro to iterate across the expectation in a test suite and check how often
		a coverage token is found

		@param dir        - The location of the test-suite
		@param resultfile   - The result file to update
		@param includes     - The mask of files to check
	-->
	<macrodef name="coverage-runner">
		<attribute name="dir"/>
		<attribute default="${test.coverage.xml}" name="resultfile"/>
		<attribute name="includes"/>
		<attribute name="file"/>
		<sequential>
			<var name="token.count" value="0"/>
			<var name="covered.count" value="0"/>
			<var name="percentage" value="0"/>
			<xmltask source="@{dir}/test/@{file}">
				<call path="//element[text()]">
					<param default="" name="token" path="text()"/>
					<param default="" name="id" path="@id"/>
					<actions>
						<propertyregex defaultValue="@{token}" global="true" input="@{token}" override="true" property="regex" regexp=" " replace=".+"/>
						<coverage-check dir="@{dir}" id="@{id}" resultfile="@{resultfile}" includes="@{includes}">
							<test-condition>
								<containsregexp casesensitive="yes" expression="&lt;${regex}.*&gt;"/>
							</test-condition>
						</coverage-check>
						<math datatype="int" operand1="${token.count}" operand2="1" operation="+" result="token.count"/>
					</actions>
				</call>
				<call path="//line[text()]">
					<param default="" name="token" path="text()"/>
					<param default="" name="id" path="@id"/>
					<actions>
						<coverage-check dir="@{dir}" id="@{id}" resultfile="@{resultfile}" includes="@{includes}">
							<test-condition>
								<contains casesensitive="yes" text="@{token}"/>
							</test-condition>
						</coverage-check>
						<math datatype="int" operand1="${token.count}" operand2="1" operation="+" result="token.count"/>
					</actions>
				</call>
			</xmltask>
			<math datatype="double" operand1="${covered.count}" operand2="${token.count}" operation="/" result="percentage"/>
			<xmltask dest="@{resultfile}" source="@{resultfile}">
				<attr attr="percent" path="//package[@name='${test-suite}']" value="${percentage}"/>
				<attr attr="tokens" path="//package[@name='${test-suite}']" value="${token.count}"/>
				<attr attr="covered" path="//package[@name='${test-suite}']" value="${covered.count}"/>
			</xmltask>
		</sequential>
	</macrodef>
	<!--
		Macro to create a series of ant targets to validate and build each document.

		Effectively this forms the setup phase of a test fixture.

		@param dir        - The location of the tests
		@param suite 	   - The name of the test suite

	-->
	<macrodef name="create-fixture">
		<attribute name="dir"/>
		<attribute name="suite"/>
		<sequential>
			<xmltask dest="@{dir}/fixture.xml" source="${dita.plugin.fox.jason.unit-test.dir}/resource/fixture.xml"/>
			<xmltask dest="@{dir}/fixture.xml" source="@{dir}/fixture.xml">
				<replace path="/project/description" withXml="&lt;description&gt;@{suite}&lt;/description&gt;"/>
			</xmltask>
			<for param="doc-type-path">
				<path>
					<dirset dir="@{dir}/test" includes="*">
						<exclude name="*/out"/>
						<exclude name="*/temp"/>
						<present targetdir="@{dir}/test">
							<mapper from="*" to="*/build.xml" type="glob"/>
						</present>
					</dirset>
				</path>
				<!-- Loop through all directories with a build/build.xml -->
				<sequential>
					<local name="test.name"/>
					<local name="test.description"/>
					<local name="test.disabled"/>
					<propertyregex casesensitive="false" input="@{doc-type-path}" override="true" property="test.name" regexp="([^/\\]*)$" select="\1"/>
					<condition property="test.disabled" value="true">
						<resourcecontains resource="@{doc-type-path}/build.xml" substring="@disabled"/>
					</condition>
					<xmltask source="@{doc-type-path}/build.xml">
						<copy path="//project/description/text()" property="test.description"/>
					</xmltask>
					<xmltask source="@{doc-type-path}/build.xml">
						<copy path="//project/target/@description" property="test.description"/>
					</xmltask>
					<property name="test.description" value="${test.name}"/>
					<unit-test-log id="UNIT005W" if:set="test.disabled" level="warning" message="The test '@{suite}/${test.name}' is disabled."/>
					<xmltask dest="@{dir}/fixture.xml" source="@{dir}/fixture.xml" unless:set="test.disabled">
						<insert path="/project">&lt;target name=&quot;test: ${test.description}&quot;&gt;
		&lt;unit-test name=&quot;${test.name}&quot;/&gt;
	&lt;/target&gt;

						</insert>
					</xmltask>
				</sequential>
			</for>
		</sequential>
	</macrodef>
	<!--
		Console log the successful test result and colorize if necessary. 
	-->
	<scriptdef language="javascript" name="unit-test-success-echo">var escape = String.fromCharCode(27);
			var colorize = &quot;true&quot;.equals(project.getProperty(&quot;test.colorize&quot;));
			var testCopy = &quot;true&quot;.equals(project.getProperty(&quot;test.copy&quot;));

			var input = testCopy ?  &quot;[WARN] Updated all test expectations&quot; : &quot;[SUCCESS] All tests have passed&quot;;
			var ansiColor = testCopy ? &quot;[33m&quot; :  &quot;[32m&quot;;

			if (colorize) {
				input =  escape + ansiColor + input;
				input += escape + &quot;[0m&quot;;
			}

			project.log('', 1);
			project.log(input, 1);
		
	</scriptdef>
	<!--
		Fail the test run. This has been extracted to ensure
		messages can be displayed easily under DITA-OT 2.x
	-->
	<macrodef name="unit-test-failure">
		<sequential>
			<dita-ot-fail id="UNIT001F" unless:set="otversion.legacy"/>
			<fail if:set="otversion.legacy" message="At least one test has failed" taskname="UNIT001F"/>
		</sequential>
	</macrodef>
	<!--
		Write something to the message log. This has been extracted to ensure
		messages can be displayed easily under DITA-OT 2.x

		@param id - the ID of the resource string
		@param message - the text of the message
		@param level - the logging level (e.g. warning) 
	-->
	<macrodef name="unit-test-log">
		<attribute name="id"/>
		<attribute name="message"/>
		<attribute name="level"/>
		<sequential>
			<dita-ot-echo id="@{id}" unless:set="otversion.legacy">
				<param name="1" value="@{message}"/>
			</dita-ot-echo>
			<echo if:set="otversion.legacy" level="@{level}" message="@{message}" taskname="@{id}"/>
		</sequential>
	</macrodef>
</antlib>